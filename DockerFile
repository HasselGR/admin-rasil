# Etapa 1: construir dependencias PHP (composer)
FROM php:8.2-fpm-alpine AS build

# Instala dependencias del sistema y extensiones PHP requeridas
RUN apk add --no-cache \
    git unzip curl bash postgresql-dev libpng-dev libjpeg-turbo-dev libzip-dev \
    && docker-php-ext-configure gd --with-jpeg \
    && docker-php-ext-install pdo pdo_pgsql gd zip bcmath opcache

# Instalar Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html

# Copiamos solo composer.json y composer.lock para cache
COPY composer.json composer.lock ./

# Instalar dependencias PHP de Laravel
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-progress

# Copiar todo el proyecto
COPY . .

# Ajustar permisos para Laravel
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache

# Compilar caches Laravel si quieres (puedes omitirlo y hacerlo en start command)
# RUN php artisan config:cache && php artisan route:cache

# Etapa 2: imagen final con Nginx + PHP-FPM
FROM nginx:1.25-alpine

# Instalar PHP-FPM en esta imagen
RUN apk add --no-cache php8 php8-fpm php8-pdo_pgsql php8-bcmath php8-gd php8-zip php8-opcache \
    && adduser -D -g 'www' www

# Copiar configuración Nginx
COPY ./docker/nginx/default.conf /etc/nginx/conf.d/default.conf

# Copiar código desde la etapa build
COPY --from=build /var/www/html /var/www/html

# Ajustar permisos
RUN chown -R www:www /var/www/html

WORKDIR /var/www/html

# Puerto para Render
EXPOSE 10000

CMD ["sh", "-c", "php-fpm8 -D && nginx -g 'daemon off;'"]
